What is Selenium?
    Selenium is a testing tool that helps us automate websites i.e., it allows us to test those websites

How are websites made?
    Using HTML code

<input> => usually all tags have a closing tag, but there are few which do not have a closing tag
<input id='abc' class='pert' name='xyz'>

<button id='abc> </button>
or this can also be written as:
<button id='abc'/> they both mean the same thing

<button id='ret'> pressthebutton</button>
the html tag has a text or not

1. the text must be between opening and closing tag. i.e must be between <tagname>text</tagname>

*********Locators**********

In order to deal with WebElements on a website, we need locators and selenium provides us with 8 locators.

    1. By id
    2.By className
    3. By name
    4. By linktext ---------------- #must have a anchor tag
    5. By partiallinktext --------- #must have a text
    6. By tagName
    7. Xpath
    8. CSS


    <a> is called an anchor tag, it usually has all the links.

    Rules:
    1. must be unique
    2. Avoid the ones with numbers in them
    3. Avoid the ones with spaces

********Xpath*********

1. //tagName[@attribute='value']
    contains method
        //tagName[contains(@attributes,'value')]

2. //tagName[text()='value']
    contains method
        //tagName[contains(text(),'value')]

3.  //tagName[starts-with(@attribute,'startingvalue of attrib')]
    //tagName[starts-with(text(),'startingvalue of text')]

Last resort is if after every try still xpath isn't unique enough, we can use indexing

To have operators like and or in our xpath conditions
tagName[@attribute='value' and @attribute='value']
tagName[@attribute='value' or @attribute='value']

example:
//input[@value='Male' and @name='optradio']

**************CSS****************

CSS can't find an element using text

1. tagname[attribute='value']
2. shortcuts --->
                 id# ------------------> tagname#value
                 className . ----------> tagname.value
                 * represents contain -> tagname[attribute *= 'partial attribute value']

We have a starts-with method is CSS as well.
    ^ sign represents the starts with
    tagname[attribute ^= 'starting attribute value']

We have an ends with methods also in CSS
    $ symbol represents ends-with method in CSS
    tagname[attribute $= 'ending attribute value']

**********Driver Commands***************

driver.close()
driver.quit()
driver.get()
driver.findElements()
driver.findElement()
driver.manage().windows().maximize()
driver.navigate().to()
driver.getTittle()
driver.SwitchTo()
driver.getCurrentURL()

**********WebElement Commands***************

click()
sendKeys()
clear()
getText()
getAttributeValue()
isEnable()
isDisplayed()
isSelected()

*********************************************

1. TextBox      --> sendKeys(),clear(),isDisplayed(),isEnabled(),getAttributeValue()
2. Button       --> click(),isDisplayed(),isEnabled(),getAttributeValue()
3. radioButtons --> click(),isDisplayed(),isEnabled(),getAttributeValue(),isSelected()
4. checkBox     --> click(),isDisplayed(),isEnabled(),getAttributeValue(),isSelected()

**********DropDowns***************

1. Is there a select tag in your dropDown?
if YES --> use selenium Select class to deal with
and
if not --> then deal with it in a regular manner how you deal with other WebElement

Approach:

1. Inspect and find the xpath for that dropDown
2. Create the instance of the Select class and pass in the parameters the WebElement
3. Use any of the available methods to select your desired value

    a. By index
    b. By visible Text
    c. By value

single && multi

There is no difference in dealing with both, apart from the fact that we can use deselect methods
with the multiselect dropdown.

******************SwitchToCommands************************

Alerts:
html        -> deal with them how we deal with regular webElements
windows     -> no we cannot deal with them
javascript  -> switchTo

Not:
Whenever there is an alert, the control is taken odd from the main page

Approach:
1. switch the focus and use methods from alert class

    driver.switchTo.alert() --->switch the focus

    accept()
    dismiss()
    sendKeys()

***********************Frames**********************************

Ways to switch the focus to an iframe

    1. by index
    2. by ID or Name
    3. by webElement -- find the WebElement first and then pass that webElement is the argument of
                        driver.switchTo.frame(WebElement)

***********************windowHandles******************************

driver.getwindowHandle()  --> returns current page window handle
driver.getwindowHandles() --> returns a set of all windows handles that are opened up

driver.switchTo.window(handle)

***********************Waits**********************************

Why waits over thread.sleep?
    thread.sleep forces to wait for specified time
        if element is found earlier it will still wait that is a problem we don't exactly know how much time it will
        be taking for element to be found

-- implicit:
It is a global wait

Implicit wait is going to wait until the WebElement is found, we just have to define them in the start that is it.

driver.manage().timeouts().implicitlyWait(Duration.of.seconds(20);

-- Explicit:
Will wait until a WebElement is found

